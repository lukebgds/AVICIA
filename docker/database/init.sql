-- ================================
-- ========== SCHEMAS ============
-- ================================
CREATE SCHEMA IF NOT EXISTS seguranca;
CREATE SCHEMA IF NOT EXISTS cadastro;
CREATE SCHEMA IF NOT EXISTS clinico;
CREATE SCHEMA IF NOT EXISTS administrativo;

SET search_path TO seguranca, cadastro, clinico, administrativo;

-- ================================
-- ======== ENUM TYPES ============
-- ================================
CREATE TYPE tipo_gravidade AS ENUM ('leve','moderada','grave');
CREATE TYPE tipo_diagnostico AS ENUM ('principal','secundario');
CREATE TYPE tipo_status_diagnostico AS ENUM ('ativo','curado','inativo');
CREATE TYPE tipo_consulta AS ENUM ('presencial','teleconsulta');
CREATE TYPE tipo_status_consulta AS ENUM ('agendada','realizada','cancelada','nao_compareceu');
CREATE TYPE tipo_status_prescricao AS ENUM ('ativa','suspensa','concluida');
CREATE TYPE tipo_status_agenda AS ENUM ('livre','agendado','concluido','cancelado','bloqueado','expirado');

-- ================================
-- ====== TABELAS SEGURANCA =======
-- ================================
CREATE TABLE seguranca.roles (
  id_role INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome varchar NOT NULL,
  permissoes json NOT NULL,
  descricao text
);

CREATE TABLE seguranca.usuario (
  id_usuario INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_role int NOT NULL REFERENCES seguranca.roles(id_role),
  nome varchar NOT NULL,
  sobrenome varchar NOT NULL,
  cpf varchar UNIQUE NOT NULL,
  email varchar UNIQUE NOT NULL,
  telefone varchar UNIQUE NOT NULL,
  senha_hash varchar UNIQUE NOT NULL,
  data_criacao date NOT NULL,
  mfa_habilitado boolean NOT NULL,
  ativo boolean NOT NULL
);

CREATE TABLE seguranca.log_auditoria (
  id_log INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_usuario int NOT NULL REFERENCES seguranca.usuario(id_usuario),
  acao varchar NOT NULL,
  data_hora timestamp NOT NULL,
  entidade_afetada varchar NOT NULL,
  detalhes text NOT NULL
);

-- ================================
-- ====== TABELAS CADASTRO ========
-- ================================
CREATE TABLE cadastro.usuario_paciente (
  id_paciente INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_usuario int REFERENCES seguranca.usuario(id_usuario),
  data_nascimento date NOT NULL,
  sexo varchar NOT NULL,
  estado_civil varchar NOT NULL,
  profissao varchar NOT NULL,
  endereco varchar NOT NULL,
  preferencia_contato varchar NOT NULL
);

CREATE TABLE cadastro.usuario_profissional_saude (
  id_profissional_saude INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_usuario int NOT NULL REFERENCES seguranca.usuario(id_usuario),
  matricula varchar UNIQUE NOT NULL,
  conselho varchar NOT NULL,
  registro_conselho varchar NOT NULL,
  especialidade varchar NOT NULL,
  cargo varchar NOT NULL,
  unidade varchar NOT NULL
);

CREATE TABLE cadastro.usuario_funcionario (
  id_funcionario INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_usuario int NOT NULL REFERENCES seguranca.usuario(id_usuario),
  cargo varchar NOT NULL,
  setor varchar NOT NULL,
  matricula varchar UNIQUE NOT NULL,
  observacoes text
);

CREATE TABLE cadastro.paciente_convenio (
  id_paciente_convenio INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_paciente int NOT NULL REFERENCES cadastro.usuario_paciente(id_paciente),
  nome_convenio varchar,
  numero_carteirinha varchar,
  validade date
);

CREATE TABLE cadastro.paciente_alergia (
  id_paciente_alergia INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_paciente int NOT NULL REFERENCES cadastro.usuario_paciente(id_paciente),
  gravidade tipo_gravidade
);

CREATE TABLE cadastro.paciente_medicamento (
  id_paciente_medicamento INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_paciente int NOT NULL REFERENCES cadastro.usuario_paciente(id_paciente),
  medicamento varchar,
  dosagem varchar,
  frequencia varchar
);

CREATE TABLE cadastro.paciente_vacina (
  id_paciente_vacina INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_paciente int NOT NULL REFERENCES cadastro.usuario_paciente(id_paciente),
  vacina varchar,
  data_aplicacao date
);

CREATE TABLE cadastro.paciente_antecedente (
  id_paciente_antecedente INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_paciente int NOT NULL REFERENCES cadastro.usuario_paciente(id_paciente),
  tipo_doenca varchar,
  parentesco varchar
);

CREATE TABLE cadastro.paciente_anexo (
  id_paciente_anexo INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_paciente int NOT NULL REFERENCES cadastro.usuario_paciente(id_paciente),
  tipo varchar,
  descricao text,
  url_arquivo varchar,
  data_upload date
);

CREATE TABLE cadastro.paciente_diagnostico (
  id_paciente_diagnostico INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_paciente int NOT NULL REFERENCES cadastro.usuario_paciente(id_paciente),
  codigo_cid10 varchar,
  descricao varchar,
  data_diagnostico date,
  tipo tipo_diagnostico,
  status tipo_status_diagnostico
);

-- ================================
-- ======= TABELAS CLINICO ========
-- ================================
CREATE TABLE clinico.consulta (
  id_consulta INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_paciente int NOT NULL REFERENCES cadastro.usuario_paciente(id_paciente),
  id_profissional_saude int NOT NULL REFERENCES cadastro.usuario_profissional_saude(id_profissional_saude),
  data_consulta timestamp NOT NULL,
  tipo tipo_consulta NOT NULL,
  local_consulta varchar NOT NULL,
  anamnese text NOT NULL,
  observacoes text,
  status tipo_status_consulta NOT NULL
);

CREATE TABLE clinico.diagnostico_consulta (
  id_diagnostico_consulta INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_consulta int NOT NULL REFERENCES clinico.consulta(id_consulta),
  codigo_cid10 varchar NOT NULL,
  descricao varchar
);

CREATE TABLE clinico.prescricao_consulta (
  id_prescricao INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_consulta int NOT NULL REFERENCES clinico.consulta(id_consulta),
  data_emissao timestamp NOT NULL,
  observacoes text,
  status tipo_status_prescricao NOT NULL
);

CREATE TABLE clinico.prescricao_item (
  id_item INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_prescricao int NOT NULL REFERENCES clinico.prescricao_consulta(id_prescricao),
  medicamento varchar NOT NULL,
  dosagem varchar NOT NULL,
  frequencia varchar NOT NULL,
  duracao varchar
);

CREATE TABLE clinico.exame (
  id_exame INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome varchar NOT NULL,
  descricao text,
  tipo varchar NOT NULL,
  ativo boolean NOT NULL
);

CREATE TABLE clinico.internacao (
  id_internacao INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_paciente int NOT NULL REFERENCES cadastro.usuario_paciente(id_paciente),
  id_profissional_saude int NOT NULL REFERENCES cadastro.usuario_profissional_saude(id_profissional_saude),
  data_admissao timestamp NOT NULL,
  data_alta timestamp,
  leito varchar NOT NULL,
  observacoes text
);

CREATE TABLE clinico.exame_solicitado (
  id_exame_solicitado INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_paciente int NOT NULL REFERENCES cadastro.usuario_paciente(id_paciente),
  id_exame int NOT NULL REFERENCES clinico.exame(id_exame),
  id_consulta int REFERENCES clinico.consulta(id_consulta),
  id_profissional_saude int NOT NULL REFERENCES cadastro.usuario_profissional_saude(id_profissional_saude),
  data_solicitacao timestamp NOT NULL,
  observacoes text,
  status varchar NOT NULL
);

CREATE TABLE clinico.resultado_exame (
  id_resultado_exame INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_exame_solicitado int NOT NULL REFERENCES clinico.exame_solicitado(id_exame_solicitado),
  data_resultado timestamp NOT NULL,
  laudo text NOT NULL,
  arquivo_resultado varchar NOT NULL,
  observacoes text,
  assinado_por int NOT NULL REFERENCES cadastro.usuario_profissional_saude(id_profissional_saude),
  status varchar NOT NULL
);

-- ================================
-- ==== TABELAS ADMINISTRATIVO ====
-- ================================
CREATE TABLE administrativo.agenda (
  id_agenda INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_profissional_saude int NOT NULL REFERENCES cadastro.usuario_profissional_saude(id_profissional_saude),
  id_paciente int REFERENCES cadastro.usuario_paciente(id_paciente),
  data_horario timestamp NOT NULL,
  status tipo_status_agenda NOT NULL
);